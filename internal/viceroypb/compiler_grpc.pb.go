// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package viceroypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	// CreateCommand creates a new, unstarted command to execute. Commands are
	// identified by a handle. Commands may be started by calling StartCommand.
	CreateCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandHandle, error)
	// TailCommand tails output of a command. TailCommand may be called at any
	// point before, during, or after a command executes.
	//
	// The returned stream will always contain the full output from the
	// beginning. The returned stream will be closed once the compilation is
	// finished and all data has been sent.
	TailCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (Runner_TailCommandClient, error)
	// StartCommand starts execution of a command, returning once it completes.
	StartCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (*CommandStatus, error)
	// DeleteCommand removes a command. If the command is currently running, it
	// will be aborted. DeleteCommand must be called for every command once the
	// output is no longer needed.
	DeleteCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (*Empty, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) CreateCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandHandle, error) {
	out := new(CommandHandle)
	err := c.cc.Invoke(ctx, "/viceroy.v1.Runner/CreateCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) TailCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (Runner_TailCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[0], "/viceroy.v1.Runner/TailCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerTailCommandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Runner_TailCommandClient interface {
	Recv() (*TailCommandData, error)
	grpc.ClientStream
}

type runnerTailCommandClient struct {
	grpc.ClientStream
}

func (x *runnerTailCommandClient) Recv() (*TailCommandData, error) {
	m := new(TailCommandData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runnerClient) StartCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (*CommandStatus, error) {
	out := new(CommandStatus)
	err := c.cc.Invoke(ctx, "/viceroy.v1.Runner/StartCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteCommand(ctx context.Context, in *CommandHandle, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/viceroy.v1.Runner/DeleteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility
type RunnerServer interface {
	// CreateCommand creates a new, unstarted command to execute. Commands are
	// identified by a handle. Commands may be started by calling StartCommand.
	CreateCommand(context.Context, *CommandRequest) (*CommandHandle, error)
	// TailCommand tails output of a command. TailCommand may be called at any
	// point before, during, or after a command executes.
	//
	// The returned stream will always contain the full output from the
	// beginning. The returned stream will be closed once the compilation is
	// finished and all data has been sent.
	TailCommand(*CommandHandle, Runner_TailCommandServer) error
	// StartCommand starts execution of a command, returning once it completes.
	StartCommand(context.Context, *CommandHandle) (*CommandStatus, error)
	// DeleteCommand removes a command. If the command is currently running, it
	// will be aborted. DeleteCommand must be called for every command once the
	// output is no longer needed.
	DeleteCommand(context.Context, *CommandHandle) (*Empty, error)
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (UnimplementedRunnerServer) CreateCommand(context.Context, *CommandRequest) (*CommandHandle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommand not implemented")
}
func (UnimplementedRunnerServer) TailCommand(*CommandHandle, Runner_TailCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method TailCommand not implemented")
}
func (UnimplementedRunnerServer) StartCommand(context.Context, *CommandHandle) (*CommandStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCommand not implemented")
}
func (UnimplementedRunnerServer) DeleteCommand(context.Context, *CommandHandle) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommand not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_CreateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viceroy.v1.Runner/CreateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_TailCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandHandle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServer).TailCommand(m, &runnerTailCommandServer{stream})
}

type Runner_TailCommandServer interface {
	Send(*TailCommandData) error
	grpc.ServerStream
}

type runnerTailCommandServer struct {
	grpc.ServerStream
}

func (x *runnerTailCommandServer) Send(m *TailCommandData) error {
	return x.ServerStream.SendMsg(m)
}

func _Runner_StartCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).StartCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viceroy.v1.Runner/StartCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).StartCommand(ctx, req.(*CommandHandle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandHandle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/viceroy.v1.Runner/DeleteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteCommand(ctx, req.(*CommandHandle))
	}
	return interceptor(ctx, in, info, handler)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "viceroy.v1.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommand",
			Handler:    _Runner_CreateCommand_Handler,
		},
		{
			MethodName: "StartCommand",
			Handler:    _Runner_StartCommand_Handler,
		},
		{
			MethodName: "DeleteCommand",
			Handler:    _Runner_DeleteCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailCommand",
			Handler:       _Runner_TailCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "compiler.proto",
}
