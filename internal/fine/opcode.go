package fine

import (
	"fmt"
	"strconv"
)

// Op uniquely identifies a protocol message type. Every protocol message has a
// unique Op and, if supported by the package, an associated Request and
// Response struct. Some Ops only have requests and no respones.
type Op uint32

// All known opcodes. Opcodes are described roughly here. See the documentation
// on relevant Request and Response types for more information.
//
// Many Ops are "relative to a directory node," which means the directory that
// a specific request occurs in. Node IDs used for the directories in a request
// must be known ahead of time, usually by calling OpLookup for existing
// directories.
const (
	// OpInvalid represents an invalid Op. It should never be generated by
	// libraries.
	OpInvalid Op = 0
	// OpLookup requests node information for a named file relative to a
	// directory node.
	OpLookup Op = 1
	// OpForget informs the FINE driver that the peer is releasing its knowledge
	// of a Node ID.
	OpForget Op = 2
	// OpGetattr returns attributes for a specific node ID or handle, depending
	// on flags.
	OpGetattr Op = 3
	// OpSetattr sets attributes for a specific node ID or handle, depending on
	// flags.
	OpSetattr Op = 4
	// OpReadlink returns the data of a symbolic link for a node ID.
	OpReadlink Op = 5
	// OpSymlink creates a new symbolic link relative to a directory node.
	OpSymlink Op = 6
	// OpMknod makes a new device file relative to a directory node.
	OpMknod Op = 8
	// OpMkdir creates a new directory relative to a directory of a given node
	// ID.
	OpMkdir Op = 9
	// OpUnlink removes a named file relative to a directory of a given node ID.
	OpUnlink Op = 10
	// OpRmdir removes a named directory relative to the directory of a given
	// node ID.
	OpRmdir Op = 11
	// OpRename renames a node relative to a directory to another directory
	// (which can be the same) and giving it a new name. OpRename can be
	// considered more of a "move" than a rename.
	OpRename Op = 12
	// OpLink creates a hard link to a file. The hard link is created relative to
	// a known directory but can reference any known ID.
	OpLink Op = 13
	// OpOpen opens a known node and returns a handle to it. If OpOpen isn't
	// handled, the Linux kernel will use node IDs for file operations instead of
	// handles.
	OpOpen Op = 14
	// OpRead reads data from a file handle.
	OpRead Op = 15
	// OpWrite writes data to a file handle.
	OpWrite Op = 16
	// OpRelease closes an open file handle. OpRelease may be left unhandled.
	OpRelease Op = 18
	// OpFsync performs an fsync on a file handle. OpFsync may be left
	// unhandled.
	OpFsync Op = 20
	// OpFlush is called every time a file is closed, and can be used to flush
	// cached data. OpFlush should be handled as it a failure results in a error
	// when closing a file, but it is safe to implement as a no-op.
	//
	// Note that OpFlush is not the same as OpFileSync or OpDirSync.
	OpFlush Op = 25
	// OpInit is called when initiating the filesystem.
	OpInit Op = 26
	// OpOpendir opens a directory file relative to a known directory, returning
	// a handle. If OpOpendir is left unhandled, node IDs will be used for
	// reading directories instead of files.
	OpOpendir Op = 27
	// OpReaddir reads the entries of a directory hadirectory file relative to an ndle.
	OpReaddir Op = 28
	// OpReleasedir releases a directory handle. OpReleasedir may be left unhandled.
	OpReleasedir Op = 29
	// OpFsyncDir performs an fsync against a directory handle. OpFsyncDir may be
	// left unhandled.
	OpFsyncDir Op = 30
	// OpAccess should check if a specific file can be accessed. If this is
	// not handled, FUSE should be mounted with `default_permissions` so the
	// kernel will enforce its own permissions.
	OpAccess Op = 34
	// OpCreate creates a new file and returns a handle to it. If OpCreate is not
	// handled, OpMknod will be used instead to make files.
	OpCreate Op = 35
	// OpInterrupt informs the peer that it should stop processing a previous
	// request.
	OpInterrupt Op = 36
	// OpDestroy is called when the filesystem is shutting down.
	OpDestroy Op = 38
	// OpBatchForget batch forgets node handles.
	OpBatchForget Op = 42
	// OpLseek seeks to a location in a file handle.
	OpLseek Op = 46
)

// Opcodes that are known to exist but are unimplemented
const (
	// OpStatfs returns stats for a filesystem at a known directory.
	OpStatfs Op = 17
	// OpSetxattr sets extended attributes on a file.
	OpSetxattr Op = 21
	// OpGetxattr gets a specific extended attribute from a file.
	OpGetxattr Op = 22
	// OpListxattr returns all extended attribute names from a file.
	OpListxattr Op = 23
	// OpRemovexattr removes an extended attribute name from a file.
	OpRemovexattr Op = 24
	// OpGetLock should return a BSD- or POSIX-style lock on a file. OpGetLock
	// may be left unhandled.
	OpGetLock Op = 31
	// OpSetLock should create a BSD- or POSIX-style lock on a file. OpSetLock
	// may be left unhandled.
	OpSetLock Op = 32
	// OpSetLockWait should create a BSD- or POSIX-style lock on a file, waiting
	// until the lock is obtained. OpSetLockWait may be left unhandled.
	OpSetLockWait Op = 33
	// OpBmap finds an absolute disk block number relative to the location
	// of a specific node.
	OpBmap Op = 37
	// OpIoctl performs an ioctl.
	OpIoctl Op = 39
	// OpPoll polls a a file handle for changes.
	OpPoll Op = 40
	// OpNotifyReply is used to reply to a notification.
	OpNotifyReply Op = 41
	// OpFallocate can allocate data for a file handle.
	OpFallocate Op = 43
	// OpReaddirplus reads directory entries along with their attributes.
	OpReaddirplus Op = 44
	// OpRename2 performs a rename but optionally includes flags.
	OpRename2 Op = 45
	// OpCopyFileRange copies file ranges between two file handles.
	OpCopyFileRange Op = 47
	// OpSetupMapping is unused in FUSE 7.31.
	OpSetupMapping Op = 48
	// OpRemoveMapping is unused in FUSE 7.31.
	OpRemoveMapping Op = 49
	// OpCUSEInit initializes CUSE.
	OpCUSEInit = 4096
)

// Op name lookup
var opNames = map[Op]string{
	OpInvalid:       "invalid opcode",
	OpLookup:        "Lookup",
	OpForget:        "Forget",
	OpGetattr:       "Getattr",
	OpSetattr:       "Setattr",
	OpReadlink:      "Readlink",
	OpSymlink:       "Symlink",
	OpMknod:         "Mknod",
	OpMkdir:         "Mkdir",
	OpUnlink:        "Unlink",
	OpRmdir:         "Rmdir",
	OpRename:        "Rename",
	OpLink:          "Link",
	OpOpen:          "Open",
	OpRead:          "Read",
	OpWrite:         "Write",
	OpStatfs:        "Statfs",
	OpRelease:       "Release",
	OpFsync:         "Fsync",
	OpSetxattr:      "Setxattr",
	OpGetxattr:      "Getxattr",
	OpListxattr:     "Listxattr",
	OpRemovexattr:   "Removexattr",
	OpFlush:         "Flush",
	OpInit:          "Init",
	OpOpendir:       "Opendir",
	OpReaddir:       "Readdir",
	OpReleasedir:    "Releasedir",
	OpFsyncDir:      "Fsyncdir",
	OpGetLock:       "GetLock",
	OpSetLock:       "SetLock",
	OpSetLockWait:   "SetLockWait",
	OpAccess:        "Access",
	OpCreate:        "Create",
	OpInterrupt:     "Interrupt",
	OpBmap:          "Bmap",
	OpDestroy:       "Destroy",
	OpIoctl:         "Ioctl",
	OpPoll:          "Poll",
	OpNotifyReply:   "NotifyReply",
	OpBatchForget:   "BatchForget",
	OpFallocate:     "Fallocate",
	OpReaddirplus:   "Readdirplus",
	OpRename2:       "Rename2",
	OpLseek:         "Lseek",
	OpCopyFileRange: "CopyFileRange",
	OpSetupMapping:  "CreateMapping",
	OpRemoveMapping: "RemoveMapping",
	OpCUSEInit:      "CUSEInit",
}

// String returns a friendly name for Op.
func (o Op) String() string {
	name := opNames[o]
	if name != "" {
		return name
	}
	return "FUSE opcode " + strconv.Itoa(int(o))
}

// NewEmptyRequest creates a new, empty request object for o. This is useful
// for writing custom codecs.
//
// NewEmptyRequest may return ErrorUnimplemented for unsupported ops.
func NewEmptyRequest(o Op) (Request, error) {
	ctor := messageCtors[o]
	if ctor == nil {
		return nil, fmt.Errorf("unrecognized op: %s", o)
	}
	req, _ := ctor()
	if req == nil {
		return nil, ErrorUnimplemented
	}
	return req, nil
}

// NewEmptyResponse creates a new, empty response object for o. This is useful
// for writing custom codecs.
//
// NewEmptyResponse may return ErrorUnimplemented for unsupported ops or ops
// that do not have responses.
func NewEmptyResponse(o Op) (Response, error) {
	ctor := messageCtors[o]
	if ctor == nil {
		return nil, fmt.Errorf("unrecognized op: %s", o)
	}
	_, resp := ctor()
	if resp == nil {
		return nil, ErrorUnimplemented
	}
	return resp, nil
}

var messageCtors = map[Op]func() (Request, Response){
	OpInvalid:       func() (Request, Response) { return nil, nil },
	OpLookup:        func() (Request, Response) { return &LookupRequest{}, &EntryResponse{} },
	OpForget:        func() (Request, Response) { return &ForgetRequest{}, nil },
	OpGetattr:       func() (Request, Response) { return &GetattrRequest{}, &AttrResponse{} },
	OpSetattr:       func() (Request, Response) { return &SetattrRequest{}, &AttrResponse{} },
	OpReadlink:      func() (Request, Response) { return nil, &ReadlinkResponse{} },
	OpSymlink:       func() (Request, Response) { return &SymlinkRequest{}, &EntryResponse{} },
	OpMknod:         func() (Request, Response) { return &MknodRequest{}, &EntryResponse{} },
	OpMkdir:         func() (Request, Response) { return &MkdirRequest{}, &EntryResponse{} },
	OpUnlink:        func() (Request, Response) { return &UnlinkRequest{}, nil },
	OpRmdir:         func() (Request, Response) { return &RmdirRequest{}, nil },
	OpRename:        func() (Request, Response) { return &RenameRequest{}, nil },
	OpLink:          func() (Request, Response) { return &LinkRequest{}, &EntryResponse{} },
	OpOpen:          func() (Request, Response) { return &OpenRequest{}, &OpenedResponse{} },
	OpRead:          func() (Request, Response) { return &ReadRequest{}, &ReadResponse{} },
	OpWrite:         func() (Request, Response) { return &WriteRequest{}, &WriteResponse{} },
	OpStatfs:        func() (Request, Response) { return nil, nil },
	OpRelease:       func() (Request, Response) { return &ReleaseRequest{}, nil },
	OpFsync:         func() (Request, Response) { return &FsyncRequest{}, nil },
	OpSetxattr:      func() (Request, Response) { return nil, nil },
	OpGetxattr:      func() (Request, Response) { return nil, nil },
	OpListxattr:     func() (Request, Response) { return nil, nil },
	OpRemovexattr:   func() (Request, Response) { return nil, nil },
	OpFlush:         func() (Request, Response) { return &FlushRequest{}, nil },
	OpInit:          func() (Request, Response) { return &InitRequest{}, &InitResponse{} },
	OpOpendir:       func() (Request, Response) { return &OpenRequest{}, &OpenedResponse{} },
	OpReaddir:       func() (Request, Response) { return &ReadRequest{}, &ReaddirResponse{} },
	OpReleasedir:    func() (Request, Response) { return &ReleaseRequest{}, nil },
	OpFsyncDir:      func() (Request, Response) { return &FsyncRequest{}, nil },
	OpGetLock:       func() (Request, Response) { return nil, nil },
	OpSetLock:       func() (Request, Response) { return nil, nil },
	OpSetLockWait:   func() (Request, Response) { return nil, nil },
	OpAccess:        func() (Request, Response) { return &AccessRequest{}, nil },
	OpCreate:        func() (Request, Response) { return &CreateRequest{}, &CreateResponse{} },
	OpInterrupt:     func() (Request, Response) { return &InterruptRequest{}, nil },
	OpBmap:          func() (Request, Response) { return nil, nil },
	OpDestroy:       func() (Request, Response) { return nil, nil },
	OpIoctl:         func() (Request, Response) { return nil, nil },
	OpPoll:          func() (Request, Response) { return nil, nil },
	OpNotifyReply:   func() (Request, Response) { return nil, nil },
	OpBatchForget:   func() (Request, Response) { return &BatchForgetRequest{}, nil },
	OpFallocate:     func() (Request, Response) { return nil, nil },
	OpReaddirplus:   func() (Request, Response) { return nil, nil },
	OpRename2:       func() (Request, Response) { return nil, nil },
	OpLseek:         func() (Request, Response) { return &LseekRequest{}, &LseekResponse{} },
	OpCopyFileRange: func() (Request, Response) { return nil, nil },
	OpSetupMapping:  func() (Request, Response) { return nil, nil },
	OpRemoveMapping: func() (Request, Response) { return nil, nil },
	OpCUSEInit:      func() (Request, Response) { return nil, nil },
}
